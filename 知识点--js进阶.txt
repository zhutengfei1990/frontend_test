let const
1. let 定义变量，let a = 1
2. const定义常量，const b = 2;定义的是必须赋值；
3. var 定义变量，有变量提升（定义前就可以使用，且只为undefined，是旧版本js的问题）

解构赋值
1. 数组 
  const arr = [1,2]
  const [a, b] = arr
2. 对象
  const obj = { a: 1, b: 2}
  const { a, b } = obj or const { a: aliasA, b: aliasB } = obj

模板字符串
1. let a = 'str1'  const str2= `abc ${a}`

字符串方法
1. includes  'abc'.includes('a)  true
2. startsWith 'abc'.startsWith('a) true
3. endsWith 'abc'.endsWith('c) true
4. padStart 'abc'.padStart(10, 'b') 'bbbbbbbabc'
5. padEnd 'abc'.padEnd(10, 'b') 'abcbbbbbbb'
6. trimStart '  abc   '.trimStart()  'abc    '
7. trimEnd '   abc   '.trimEnd() '    abc'
8. match  'a2bc'.match(/[\d]+/) // ['2', index: 1, input: 'a2bc', groups: undefined]
9. 'abc'.replace('a', 'g') // gbc
  'aabc'.replace('a', 'g') // gabc
  'aabc'.replaceAll('a', 'g') // ggbc
  'abc'.replace(/[a-z]/, 1) // 1bc
  'abc'.replace(/[a-z]/g, 1) // 111

正则表达式
1. 定义
const reg = /[\d]/  or const reg2 = new RegExp("[\\d]")

2. 常用的
[a-z] 表示a-z
[xyz] 一个字符集合xyz
[^xyz] 匹配任何没有包含在方括号中的字符
\w 匹配一个单字字符（字母、数字或者下划线
\d 匹配一个数字
\s 匹配一个空白字符，包括空格、制表符、换页符和换行符
+ 1到n个 等价于 {1, n}
* 0到n个       {0, n}
? 0或1个       {0, 1}
. 默认匹配除换行符之外的任何单个字符

箭头函数：箭头函数中的this是定义所在的this
常规定义：
function (x,y) {
  return x + y
}
箭头函数 (x,y) => x + y

数组方法
1. includes 'abc'.includes('a') // true
2. startsWith 'abc'.startsWith('a') // true
3. endsWith 同
4. padStart 'abc'.padStart(10, 'a') // '*******abc'
5. padEnd 同
6. trimStart 删除开头的空格
7. trimEnd 同
8. match 'abc'.match('a') // ['a', index: 0, input: 'abc', groups: undefined]
9. replace 'abc'.replace('a', 'e') 
  'abc'.replace(/[ab]/g, 'e') // 'eec'
  'abc'.replace(/[ab]/, 'e')  // 'ebc'
 